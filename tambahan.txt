app.py : tambahan

from model_android import facecropAndroid,predict_resultForAndroid,preprocess_imgForAndroid
from model_chatbot_android import model,file_intents,file_words,file_classes,intents,words,classes,clean_up_sentence,bow,predict_class,getResponse,chatbot_response
from flask import jsonify

#For Android Route 
@app.route("/chatbot_resAndroid", methods=['GET', 'POST'])
def get_bot_responseAndroid():
    if request.method == 'POST':
        data = request.get_json()
        user_text = data.get('msg')
        test = user_text
        result = chatbot_response(test) 
        
        response_data = {'response': result} 
        return jsonify(response_data)
    else:
        return jsonify({'error': 'Method not allowed'}), 405



@app.route("/loginAndroid", methods=['POST'])
def loginAndroid():
    try:
        data = request.get_json()
        email = data.get('email')
        password = data.get('password')
        user = User.query.filter(User.email == email).first()
        
        if user and bcrypt.check_password_hash(user.password, password):    
            return jsonify({'message': 'Login successful'})
        else:
            return jsonify({'error': 'Invalid email or password'}), 401
    except Exception as e:
        return jsonify({'error': str(e)}), 500

    
@app.route('/uploadFileAndroid', methods=['POST'])
def uploadFileAndroid():
    if 'file' not in request.files:
        return 'No file part'

    file = request.files['file']

    if file.filename == '':
        return 'No selected file'


    file.save('android/images/' + file.filename)

    return 'File uploaded successfully'

@app.route('/registerAndroid', methods=['POST'])
def registerAndroid():
    try:
        data = request.get_json()
        new_user = User(
            fullname=data['fullname'],
            email=data['email'],
            # password=data['password']
            password = bcrypt.generate_password_hash(data['password']).decode('utf-8'),
        )
        db.session.add(new_user)
        db.session.commit()
        return jsonify({'message': 'User registered successfully'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/receive_json', methods=['POST'])
def receive_json():
    try:
        data = request.get_json()
        received_text = data.get('text', '')
        uploads = 'android/images/'
        
        fileName = received_text
        
        path = uploads + received_text
        # Lakukan sesuatu dengan data JSON yang diterima di server Flask
        print('JSON yang diterima:', data)
        
        facecropAndroid(path)
        img = preprocess_img(path)
        pred = predict_resultForAndroid(img)

        # Kirim respons JSON ke Flutter
        response_data = {'message': str(pred)}
        
        return jsonify(response_data)
    except Exception as e:
        print(f'Error in receive_json: {e}')
        return jsonify({'message': 'Internal Server Error'}), 500

@app.route("/analisis_sentimen", methods=['GET', 'POST'])
def analisis_sentimen():
    try:
        data = request.get_json()
        received_text = data.get('text')  # Use 'text' as the key to match the Flutter app

        # Assuming predict_sentiment is a function that analyzes sentiment
        prediction = predict_sentiment(received_text)

        # Return the prediction as JSON response
        response_data = {'prediction': str(prediction)}
        return jsonify(response_data)

    except Exception as e:
        return jsonify({'error': str(e)})
    
        
        


# End Android Route

model_chatbot_android.py

import nltk
# nltk.download('popular')
from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer()
import pickle
import numpy as np
from keras.models import load_model


import json
import random
import os

model = load_model(os.path.join(os.path.dirname(__file__), 'models/chatbot/chatbot_model.h5'))
file_intents = os.path.join(os.path.dirname(__file__), 'models/chatbot/intents.json')
file_words = os.path.join(os.path.dirname(__file__), 'models/chatbot/words.pkl')
file_classes = os.path.join(os.path.dirname(__file__), 'models/chatbot/classes.pkl') 

intents = json.loads(open(file_intents).read())
words = pickle.load(open(file_words,'rb'))
classes = pickle.load(open(file_classes,'rb'))


def clean_up_sentence(sentence):
    # tokenize the pattern - split words into array
    sentence_words = nltk.word_tokenize(sentence)
    # stem each word - create short form for word
    sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]
    return sentence_words
# return bag of words array: 0 or 1 for each word in the bag that exists in the sentence


def bow(sentence, words, show_details=True):
    # tokenize the pattern
    sentence_words = clean_up_sentence(sentence)
    # bag of words - matrix of N words, vocabulary matrix
    bag = [0]*len(words)  
    for s in sentence_words:
        for i,w in enumerate(words):
            if w == s: 
                # assign 1 if current word is in the vocabulary position
                bag[i] = 1
                if show_details:
                    print ("found in bag: %s" % w)
    return(np.array(bag))


def predict_class(sentence, model):
    # filter out predictions below a threshold
    p = bow(sentence, words,show_details=False)
    res = model.predict(np.array([p]))[0]
    ERROR_THRESHOLD = 0.25
    results = [[i,r] for i,r in enumerate(res) if r>ERROR_THRESHOLD]
    # sort by strength of probability
    results.sort(key=lambda x: x[1], reverse=True)
    return_list = []
    for r in results:
        return_list.append({"intent": classes[r[0]], "probability": str(r[1])})
    return return_list


def getResponse(ints, intents_json):
    tag = ints[0]['intent']
    list_of_intents = intents_json['intents']
    for i in list_of_intents:
        if(i['tag']== tag):
            result = random.choice(i['responses'])
            break
    return result


def chatbot_response(msg):
    ints = predict_class(msg, model)
    res = getResponse(ints, intents)
    return res

